package com.android.deSCribe;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;




import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.hardware.SensorListener;
import android.hardware.SensorManager;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Config;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;



public class compass extends Activity {
    /** Called when the activity is first created.*/
	Button btnInfo;
	ArrayList<Loc> buildings;
	private LocationManager locationManager;
	private Criteria criteria;
	public Location currentLocation;
    private static final String TAG = "Compass";
    String TABLENAME1 = "Buildings";
	private SensorManager mSensorManager;
	Menu menuSuper;
    
    private float[] mValues;

    private final SensorListener mListener = new SensorListener() {

        public void onSensorChanged(int sensor, float[] values) {
          //  if (Config.LOGD) Log.d(TAG, "sensorChanged (" + values[0] + ", " + values[1] + ", " + values[2] + ")");
            mValues = values;
            
        }

        public void onAccuracyChanged(int sensor, int accuracy) {
            // TODO Auto-generated method stub

        }
    };

	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mSensorManager = (SensorManager)getSystemService(Context.SENSOR_SERVICE);
        setContentView(R.layout.main_compass);
        
        btnInfo = (Button)findViewById(R.id.info_button);
		btnInfo.setOnClickListener(btnInfoClick);
		initGPS();
        
    }	
	
	View.OnClickListener btnInfoClick = new View.OnClickListener(){

		public void onClick(View v){
			double currentLat=0;
			double currentLng=0;
			currentLat=34.021466374397;
			currentLng=-118.2830625772;
			if(currentLocation!=null)
			{
			currentLat=currentLocation.getLatitude();
			currentLng=currentLocation.getLongitude();
			}
			
			if(currentLat == 0){
				//Toast.makeText(this, "Please wait for GPS to get current location", Toast.LENGTH_SHORT).show();
				return;				
			}
			buildings = new ArrayList<Loc>();
			Double diff = 0.001;
			String query = "";			
				query = "abs(latitude - "+currentLat+") <= "+diff+" AND abs(longitude - "+currentLng+") <= "+diff +" AND (type = 'Libraries' OR type = 'Building' OR type='Residential' OR type='Athletics')"; 
				Cursor c = deSCribe.db.query(TABLENAME1, new String[] {"id","latitude","longitude","name","code"}, query,null, null, null, null);
				
				if(c.getCount()>0){
					c.moveToFirst();
					Loc l = new Loc();
					l.Lat = Double.parseDouble(c.getString(1));
					l.Lng = Double.parseDouble(c.getString(2));
					l.Id = c.getString(0);
					l.name = c.getString(3);
					l.code = c.getString(4);
					buildings.add(l);
					getAllInfo(currentLat,currentLng,l);
					while(c.moveToNext()){
						l = new Loc();
						l.Lat = Double.parseDouble(c.getString(1));
						l.Lng = Double.parseDouble(c.getString(2));
						l.Id = c.getString(0);
						l.name = c.getString(3);
						l.code = c.getString(4);
						buildings.add(l);
						getAllInfo(currentLat,currentLng,l);
						
					}

				}
				else{
					diff *= 5;					
				}				
				String str="";				
				assignAngles();
				diff = diff*5;		
		}


	};
	
	void getAllInfo(double currLatitude, double currLongitude, Loc loc)
	{
		double angle=0;
	
		CoordinateConversion c = new CoordinateConversion();
	double d=c.LatLngDistance(currLatitude,currLongitude,loc.Lat,loc.Lng);	
	double[] temp1=c.latLon2UTM(currLatitude,currLongitude);
	double[] temp2=c.latLon2UTM(loc.Lat,loc.Lng);
	loc.distance=d;
	if(d<0.02)
		 angle=160;
	if(d>0.02 && d<0.03)
		 angle=100;
	if(d>0.03&&d<0.04)
		 angle=80;
	 if(d>0.04&&d<0.05)
		 angle=60;
	 if(d>0.05&&d<0.06)
		 angle=40;
	 if(d>0.06&&d<0.07)
		 angle=20;
	 if(d>0.07)
		 angle=0;
	double currAngles=c.getAngle(temp1[0], temp1[1],temp2[0], temp2[1]);
	loc.startAngle=currAngles-angle/2;
	loc.endAngle=currAngles+angle/2;
	if(temp2[0]-temp1[0]>0)
		loc.sign=1;
	else
		loc.sign=-1;
	 if (Config.LOGD) Log.d(TAG, "sensorChanged (" +loc.startAngle  + ", " + loc.endAngle + ", " + loc.name + "sign"+loc.sign+" x: "+""+temp2[1]+" x: "+""+temp1[1]+")");
	}
	
	
public void assignAngles(){
CoordinateConversion c = new CoordinateConversion();
Loc loc = new Loc();

for(int i=0;i<buildings.size();i++)
{
	loc=buildings.get(i);
	//tvInfo.setText("lol"+loc.startAngle);
	if(loc.sign>0)
	{
		loc.startAngle=90-loc.startAngle;
		loc.endAngle=90-loc.endAngle;
	}else
		{
		loc.startAngle=270-loc.startAngle;
		loc.endAngle=270-loc.endAngle;
		}
		
	if(loc.startAngle>mValues[0]&&loc.endAngle<mValues[0])
		{
		//tvInfo.setText(loc.name);
		//Toast.makeText(compass.this, loc.name, Toast.LENGTH_LONG).show();
		display_info(loc.name+mValues[0],loc.code);
		break;
		}//else
			//tvInfo.setText("missing"+mValues[0]+loc.sign);
}

}
public void initGPS()
{
	locationManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
	criteria = new Criteria();

	criteria.setAccuracy(Criteria.ACCURACY_FINE);
	criteria.setAltitudeRequired(false);
	criteria.setBearingRequired(false);
	criteria.setCostAllowed(false);
	criteria.setPowerRequirement(Criteria.POWER_LOW);
}
private final LocationListener locationListener = new LocationListener() {
    public void onLocationChanged(Location location) {
      updateWithNewLocation(location);
    }

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		  updateWithNewLocation(null);	
	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}
};
private void updateWithNewLocation(Location location) {
	  // Update your current location
	  currentLocation = location;

	  // Refresh the ArrayList of contacts
 
	  // Geocode your current location to find an address.
	  String latLongString = "";
	  String addressString = "No address found";
	  
  if (location != null) {
    double lat = location.getLatitude();
    double lng = location.getLongitude();
    latLongString = "Lat:" + lat + "\nLong:" + lng;

    Geocoder gc = new Geocoder(this, Locale.getDefault());
    try {
      List<Address> addresses = gc.getFromLocation(lat, lng, 1);
      StringBuilder sb = new StringBuilder();
      if (addresses.size() > 0) {
        Address address = addresses.get(0);

        sb.append(address.getLocality()).append("\n");
        sb.append(address.getCountryName());
      }
      addressString = sb.toString();
    } catch (IOException e) {}
  } else {
    latLongString = "No location found";
  }

  // Update the TextView to show your current address.
 // TextView myLocationText = (TextView)findViewById(R.id.myLocationText);
  Toast.makeText(compass.this, "Your Current Position is:\n" + latLongString + "\n" + addressString,Toast.LENGTH_SHORT).show();
  // myLocationText.setText("Your Current Position is:\n" + latLongString + "\n" + addressString);
	}

public void onStart() {
  super.onStart();
  
  // Find a Location Provider to use.
  String provider = locationManager.getBestProvider(criteria, true);
  // Update the GUI with the last known position.
  if(provider!=null)
  {
  Location location = locationManager.getLastKnownLocation(provider);
  updateWithNewLocation(location);

  // Register the LocationListener to listen for location changes
  // using the provider found above.
  locationManager.requestLocationUpdates(provider, 2000, 10, locationListener);
  }else
  {
	  Toast.makeText(compass.this, "Cannot find any providers to use to get Location Try again try switching on the GPS in setting" ,Toast.LENGTH_SHORT).show();  
	  
  }
}
    @Override
    protected void onResume()
    {
        if (Config.LOGD) Log.d(TAG, "onResume");
        super.onResume();
        mSensorManager.registerListener(mListener, 
        		SensorManager.SENSOR_ORIENTATION,
        		SensorManager.SENSOR_DELAY_UI);
    }

    @Override
    protected void onStop()
    {
        if (Config.LOGD) Log.d(TAG, "onStop");
        mSensorManager.unregisterListener(mListener);
        locationManager.removeUpdates(locationListener);
        Toast.makeText(compass.this, "Switching off" ,Toast.LENGTH_SHORT).show();
        super.onStop();
        
    }
    
    @Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menuSuper = menu;
		menu.add(0, 0, 0, "Detail Level");		
		return true;
	}
	
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case 0:
			// set up radio buttons, set default to fine			
			Intent myIntent = new Intent();
			myIntent.setClass(compass.this, Radio.class);
			startActivity(myIntent);
			finish();
			return true;		
		}
		return false;
	}
	
 private void display_info(String name,String code) {
	     
	    String text;
	    text = "You are pointing to " + name;
	    if(deSCribe.user_pref == "Coarse")
	    {
	    	Toast.makeText(compass.this,text ,Toast.LENGTH_LONG).show();
	    	return;
	    }	
	    //if reached here means you want "fine" details	
	    String query = "";			
		query = "code = '"+code+"' and  name ='"+name+"'"; 
		Cursor c = deSCribe.db.query(TABLENAME1, new String[] {"short"}, query,null, null, null, null);
		
		if(c.getCount()>0){
			c.moveToFirst();
			String description = c.getString(0);
			text += description;			
		}	
		
		String query1 = "";			
		query1 = "code ='"+code+"' and name !='"+name+"'"; 
		Cursor results = deSCribe.db.query(TABLENAME1, new String[] {"name"}, query1,null, null, null, null);
		
		if(results.getCount()>0){
			text += "Also present in the building are";
			results.moveToFirst();
			String bldg_name = c.getString(0);
			text += bldg_name;
			do{
				String neigh_name = c.getString(0);
				text += neigh_name;	
				
			}while(results.moveToNext());

		}

	      Toast.makeText(compass.this,text,Toast.LENGTH_LONG).show();
  
	}
}

class Loc{
	Double Lat;
	Double Lng;
	String Id;
	String name;
	String type;
	Double startAngle;
	Double endAngle;
	Double distance;
	Integer sign;
	String code;
}
	



	
